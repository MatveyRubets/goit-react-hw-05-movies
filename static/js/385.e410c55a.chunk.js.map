{"version":3,"file":"static/js/385.e410c55a.chunk.js","mappings":"iTAEMA,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDC,EAAgB,mCAAG,oGACZN,EAAS,sBADG,UAGX,OAFbO,EADwB,QAGtBC,OAHsB,sBAItB,IAAIC,MAAM,8BAJY,gCAOvBF,EAAIG,MAPmB,2CAAH,qDAUhBC,EAAe,mCAAG,WAAMC,GAAN,uFACXZ,EAAS,gCAAD,OAAiCY,IAD9B,UAGV,OAFbL,EADuB,QAGrBC,OAHqB,sBAIrB,IAAIC,MAAM,8BAJW,gCAOtBF,EAAIG,MAPkB,2CAAH,sDAUfG,EAAe,mCAAG,WAAMC,GAAN,uFACXd,EAAS,UAAD,OAAWc,IADR,UAGV,OAFbP,EADuB,QAGrBC,OAHqB,sBAIrB,IAAIC,MAAM,8BAJW,gCAOtBF,EAAIG,MAPkB,2CAAH,sDAUfK,EAAY,mCAAG,WAAMD,GAAN,uFACRd,EAAS,UAAD,OAAWc,EAAX,aADA,UAGP,OAFbP,EADoB,QAGlBC,OAHkB,sBAIlB,IAAIC,MAAM,8BAJQ,gCAOnBF,EAAIG,MAPe,2CAAH,sDAUZM,EAAe,mCAAG,WAAMF,GAAN,uFACXd,EAAS,UAAD,OAAWc,EAAX,aADG,UAGV,OAFbP,EADuB,QAGrBC,OAHqB,sBAIrB,IAAIC,MAAM,8BAJW,gCAOtBF,EAAIG,MAPkB,2CAAH,qD,kGC+C5B,UArFsB,WACpB,OAAwCO,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,MAMdC,EAMER,EANFQ,OACAC,EAKET,EALFS,aACAC,EAIEV,EAJFU,SACAC,EAGEX,EAHFW,YACAC,EAEEZ,EAFFY,eACAC,EACEb,EADFa,aAGIC,EAAcV,EAASW,MAAQX,EAASW,MAAMC,KAAO,IAM3D,OAJAC,EAAAA,EAAAA,YAAU,YACRtB,EAAAA,EAAAA,IAAgBO,GAASgB,MAAK,SAAAC,GAAK,OAAIlB,EAAgBkB,EAApB,GACpC,GAAE,CAACjB,KAGF,4BACE,oBAAQkB,QAAS,kBAAMd,GAAS,EAAf,EAAmBe,KAAK,SAAzC,WACE,2BACE,SAAC,MAAD,MAFJ,cAOA,4BACE,gBACEC,IACEX,EAAW,0CAC4BA,GA9B/C,uKAiCMY,IAAKX,KAEP,0BACGA,EADH,YACqBC,QADrB,IACqBA,OADrB,EACqBA,EAAcW,MAAM,EAAG,GAD5C,QAGA,wCAAgBC,KAAKC,MAAqB,GAAfjB,GAA3B,QACA,sCACA,uBAAIC,KACJ,oCACA,8BAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAAQmB,KAAI,SAAAC,GAAK,OAAIA,EAAMlC,IAAV,IAAgBmC,KAAK,aAG5C,4BACE,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMC,GAAG,OAAOf,MAAO,CAAEgB,KAAMjB,GAA/B,qBAIF,yBACE,SAAC,KAAD,CAAMgB,GAAG,UAAUf,MAAO,CAAEgB,KAAMjB,GAAlC,2BAKJ,SAAC,KAAD,SAIP,C","sources":["api/moviesApi.js","pages/MoviesDetails/MoviesDetails.js"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '34dbf9d1a3fd74b10bf7ab9eec59866f',\n    language: 'en-US',\n  },\n});\n\nexport const getPopularMovies = async () => {\n  const res = await instance('trending/movie/day');\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ðŸ¤·');\n  }\n\n  return res.data;\n};\n\nexport const getSearchMovies = async name => {\n  const res = await instance(`/search/movie?/&page=1&query=${name}`);\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ðŸ¤·');\n  }\n\n  return res.data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const res = await instance(`/movie/${movieId}`);\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ðŸ¤·');\n  }\n\n  return res.data;\n};\n\nexport const getMovieCast = async movieId => {\n  const res = await instance(`/movie/${movieId}/credits`);\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ðŸ¤·');\n  }\n\n  return res.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const res = await instance(`/movie/${movieId}/reviews`);\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ðŸ¤·');\n  }\n\n  return res.data;\n};\n","import { useEffect, useState } from 'react';\nimport {\n  useLocation,\n  useParams,\n  useNavigate,\n  Link,\n  Outlet,\n} from 'react-router-dom';\nimport { getMovieDetails } from 'api/moviesApi';\nimport { BiArrowBack } from 'react-icons/bi';\nimport PropTypes from 'prop-types';\n\nconst MoviesDetails = () => {\n  const [movieDetails, setMovieDetails] = useState([]);\n  const { movieid } = useParams();\n  const location = useLocation();\n  const history = useNavigate();\n\n  const defaultImage =\n    'https://media.istockphoto.com/vectors/no-image-available-icon-vector-id1216251206?b=1&k=20&m=1216251206&s=170667a&w=0&h=z0hxu_BaI_tuMjMneE_APbnx_-R2KGPXgDjdwLw5W7o=';\n\n  const {\n    genres,\n    vote_average,\n    overview,\n    poster_path,\n    original_title,\n    release_date,\n  } = movieDetails;\n\n  const getBackLink = location.state ? location.state.form : '/';\n\n  useEffect(() => {\n    getMovieDetails(movieid).then(movie => setMovieDetails(movie));\n  }, [movieid]);\n\n  return (\n    <div>\n      <button onClick={() => history(-1)} type=\"button\">\n        <span>\n          <BiArrowBack />\n        </span>\n        GO BACK\n      </button>\n\n      <div>\n        <img\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n              : defaultImage\n          }\n          alt={original_title}\n        />\n        <h1>\n          {original_title} ({release_date?.slice(0, 4)})\n        </h1>\n        <p>User Score: {Math.round(vote_average * 10)}%</p>\n        <h2>Overview</h2>\n        <p>{overview}</p>\n        <h2>Genres</h2>\n        <p>{genres?.map(genre => genre.name).join(' / ')}</p>\n      </div>\n\n      <div>\n        <h2>Additional information</h2>\n        <ul>\n          <li>\n            <Link to=\"cast\" state={{ from: getBackLink }}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to=\"reviews\" state={{ from: getBackLink }}>\n              Reviews\n            </Link>\n          </li>\n        </ul>\n        <Outlet />\n      </div>\n    </div>\n  );\n};\n\nMoviesDetails.propTypes = {\n  movieDetails: PropTypes.arrayOf(\n    PropTypes.shape({\n      original_title: PropTypes.string.isRequired,\n      genres: PropTypes.string.isRequired,\n      overview: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n      release_date: PropTypes.number.isRequired,\n      vote_average: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default MoviesDetails;\n"],"names":["instance","axios","baseURL","params","api_key","language","getPopularMovies","res","status","Error","data","getSearchMovies","name","getMovieDetails","movieId","getMovieCast","getMovieReviews","useState","movieDetails","setMovieDetails","movieid","useParams","location","useLocation","history","useNavigate","genres","vote_average","overview","poster_path","original_title","release_date","getBackLink","state","form","useEffect","then","movie","onClick","type","src","alt","slice","Math","round","map","genre","join","to","from"],"sourceRoot":""}