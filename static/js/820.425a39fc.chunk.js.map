{"version":3,"file":"static/js/820.425a39fc.chunk.js","mappings":"iTAEMA,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDC,EAAgB,mCAAG,oGACZN,EAAS,sBADG,UAGX,OAFbO,EADwB,QAGtBC,OAHsB,sBAItB,IAAIC,MAAM,8BAJY,gCAOvBF,EAAIG,MAPmB,2CAAH,qDAUhBC,EAAe,mCAAG,WAAMC,GAAN,uFACXZ,EAAS,gCAAD,OAAiCY,IAD9B,UAGV,OAFbL,EADuB,QAGrBC,OAHqB,sBAIrB,IAAIC,MAAM,8BAJW,gCAOtBF,EAAIG,MAPkB,2CAAH,sDAUfG,EAAe,mCAAG,WAAMC,GAAN,uFACXd,EAAS,UAAD,OAAWc,IADR,UAGV,OAFbP,EADuB,QAGrBC,OAHqB,sBAIrB,IAAIC,MAAM,8BAJW,gCAOtBF,EAAIG,MAPkB,2CAAH,sDAUfK,EAAY,mCAAG,WAAMD,GAAN,uFACRd,EAAS,UAAD,OAAWc,EAAX,aADA,UAGP,OAFbP,EADoB,QAGlBC,OAHkB,sBAIlB,IAAIC,MAAM,8BAJQ,gCAOnBF,EAAIG,MAPe,2CAAH,sDAUZM,EAAe,mCAAG,WAAMF,GAAN,uFACXd,EAAS,UAAD,OAAWc,EAAX,aADG,UAGV,OAFbP,EADuB,QAGrBC,OAHqB,sBAIrB,IAAIC,MAAM,8BAJW,gCAOtBF,EAAIG,MAPkB,2CAAH,qD,4GCuB5B,UAlEe,WACb,OAAsCO,EAAAA,EAAAA,UAAS,MAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,SACzBC,GAAWC,EAAAA,EAAAA,MAuBjB,OAJAC,EAAAA,EAAAA,YAAU,WACRJ,IAASZ,EAAAA,EAAAA,IAAgBY,GAAOK,MAAK,SAAAC,GAAK,OAAIV,EAAeU,EAAnB,GAC3C,GAAE,CAACN,KAGF,4BACE,2DACA,iBAAMO,SAxBW,SAAAC,GACnBA,EAAEC,iBAEF,IAAMC,EAAQF,EAAEG,OAAOC,SAASZ,MAAMU,MAAMG,cACtCC,EAAaN,EAAEO,cAErBhB,EAAgB,CAAEC,MAAOU,IACzBI,EAAWE,QAEU,KAAjBN,EAAMO,QACRC,EAAAA,OAAAA,QACE,qEAIL,EASG,UACE,8BACE,kBAAO7B,KAAK,QAAQ8B,KAAK,UACzB,mBAAQA,KAAK,SAAb,UACE,2BACE,SAAC,MAAD,cAKR,0BACGxB,GACCA,EAAYyB,QAAQC,KAAI,SAAAf,GAAK,OAC3B,yBACE,SAAC,KAAD,CAAMgB,GAAE,kBAAahB,EAAMiB,IAAMC,MAAO,CAAEC,KAAMvB,GAAhD,SACGI,EAAMoB,SAFFpB,EAAMiB,GADY,IAO9B5B,GAC+B,IAA9BA,EAAYgC,eACZT,EAAAA,OAAAA,QAAe,iDAIxB,C","sources":["api/moviesApi.js","pages/Movies/Movies.js"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '34dbf9d1a3fd74b10bf7ab9eec59866f',\n    language: 'en-US',\n  },\n});\n\nexport const getPopularMovies = async () => {\n  const res = await instance('trending/movie/day');\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ðŸ¤·');\n  }\n\n  return res.data;\n};\n\nexport const getSearchMovies = async name => {\n  const res = await instance(`/search/movie?/&page=1&query=${name}`);\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ðŸ¤·');\n  }\n\n  return res.data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const res = await instance(`/movie/${movieId}`);\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ðŸ¤·');\n  }\n\n  return res.data;\n};\n\nexport const getMovieCast = async movieId => {\n  const res = await instance(`/movie/${movieId}/credits`);\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ðŸ¤·');\n  }\n\n  return res.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const res = await instance(`/movie/${movieId}/reviews`);\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ðŸ¤·');\n  }\n\n  return res.data;\n};\n","import { Notify } from 'notiflix';\nimport { BiSearchAlt } from 'react-icons/bi';\nimport { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams, Link } from 'react-router-dom';\nimport { getSearchMovies } from 'api/moviesApi';\nimport PropTypes from 'prop-types';\n\nconst Movies = () => {\n  const [searchMovie, setSearchMovie] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n  const location = useLocation();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const value = e.target.elements.query.value.toLowerCase();\n    const valueInput = e.currentTarget;\n\n    setSearchParams({ query: value });\n    valueInput.reset();\n\n    if (value.trim() === '') {\n      Notify.failure(\n        'Please,check the correct spelling of the movie title and try again'\n      );\n      return;\n    }\n  };\n\n  useEffect(() => {\n    query && getSearchMovies(query).then(movie => setSearchMovie(movie));\n  }, [query]);\n\n  return (\n    <div>\n      <h1>Search for Any Movie You Want</h1>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input name=\"query\" type=\"text\" />\n          <button type=\"submit\">\n            <span>\n              <BiSearchAlt />\n            </span>\n          </button>\n        </label>\n      </form>\n      <ul>\n        {searchMovie &&\n          searchMovie.results.map(movie => (\n            <li key={movie.id}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                {movie.title}\n              </Link>\n            </li>\n          ))}\n        {searchMovie &&\n          searchMovie.total_results === 0 &&\n          Notify.warning('There are no movies matching your query!')}\n      </ul>\n    </div>\n  );\n};\n\nMovies.propTypes = {\n  movie: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default Movies;\n"],"names":["instance","axios","baseURL","params","api_key","language","getPopularMovies","res","status","Error","data","getSearchMovies","name","getMovieDetails","movieId","getMovieCast","getMovieReviews","useState","searchMovie","setSearchMovie","useSearchParams","searchParams","setSearchParams","query","get","location","useLocation","useEffect","then","movie","onSubmit","e","preventDefault","value","target","elements","toLowerCase","valueInput","currentTarget","reset","trim","Notify","type","results","map","to","id","state","from","title","total_results"],"sourceRoot":""}