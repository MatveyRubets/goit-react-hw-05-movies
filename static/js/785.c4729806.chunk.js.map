{"version":3,"file":"static/js/785.c4729806.chunk.js","mappings":"0TAEMA,EAAU,mCACVC,EAAW,+BAEJC,EAAgB,mCAAG,oGACZC,IAAAA,IAAA,UACbF,EADa,uCAC0BD,IAFd,UAKX,OAJbI,EADwB,QAKtBC,OALsB,sBAMtB,IAAIC,MAAM,8BANY,gCASvBF,EAAIG,MATmB,2CAAH,qDAYhBC,EAAe,mCAAG,WAAMC,GAAN,uFACXN,IAAAA,IAAA,UACbF,EADa,iCACoBD,EADpB,yBAC4CS,IAFjC,UAKV,OAJbL,EADuB,QAKrBC,OALqB,sBAMrB,IAAIC,MAAM,8BANW,gCAStBF,EAAIG,MATkB,2CAAH,sDAYfG,EAAe,mCAAG,WAAMC,GAAN,uFACXR,IAAAA,IAAA,UACbF,EADa,kBACKU,EADL,oBACwBX,IAFb,UAKV,OAJbI,EADuB,QAKrBC,OALqB,sBAMrB,IAAIC,MAAM,8BANW,gCAStBF,EAAIG,MATkB,2CAAH,sDAYfK,EAAY,mCAAG,WAAMC,GAAN,uFACRV,IAAAA,IAAA,UACbF,EADa,kBACKY,EADL,4BACgCb,IAFxB,UAKP,OAJbI,EADoB,QAKlBC,OALkB,sBAMlB,IAAIC,MAAM,8BANQ,gCASnBF,EAAIG,MATe,2CAAH,sDAYZO,EAAe,mCAAG,WAAMH,GAAN,uFACXR,IAAAA,IAAA,UACbF,EADa,kBACKU,EADL,4BACgCX,IAFrB,UAKV,OAJbI,EADuB,QAKrBC,OALqB,sBAMrB,IAAIC,MAAM,8BANW,gCAStBF,EAAIG,MATkB,2CAAH,qD,gFCf5B,UAjCgB,WACd,OAAwCQ,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,YACRN,EAAAA,EAAAA,IAAgBI,GAASG,KAAKJ,EAC/B,GAAE,CAACC,IAEGF,GAA+C,IAA/BA,EAAaM,eAClC,oFAEA,wBACGN,GACCA,EAAaO,QAAQC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACvB,2BACE,yCAAiBD,MACjB,uBAAIC,MAFGF,EADc,KAQhC,C","sources":["api/moviesApi.js","components/Reviews/Reviews.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '2951025ecfa7eb766855c73351b1b83e';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getPopularMovies = async () => {\n  const res = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ü§∑');\n  }\n\n  return res.data;\n};\n\nexport const getSearchMovies = async name => {\n  const res = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&page=1&query=${name}`\n  );\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ü§∑');\n  }\n\n  return res.data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const res = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ü§∑');\n  }\n\n  return res.data;\n};\n\nexport const getMovieCast = async movieID => {\n  const res = await axios.get(\n    `${BASE_URL}/movie/${movieID}/credits?api_key=${API_KEY}`\n  );\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ü§∑');\n  }\n\n  return res.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const res = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ü§∑');\n  }\n\n  return res.data;\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'api/moviesApi';\nimport PropTypes from 'prop-types';\n\nconst Reviews = () => {\n  const [movieReviews, setMovieReviews] = useState(null);\n  const { movieid } = useParams();\n\n  useEffect(() => {\n    getMovieReviews(movieid).then(setMovieReviews);\n  }, [movieid]);\n\n  return movieReviews && movieReviews.total_results === 0 ? (\n    <p>There is no review information ü§∑üèª</p>\n  ) : (\n    <ul>\n      {movieReviews &&\n        movieReviews.results.map(({ id, author, content }) => (\n          <li key={id}>\n            <strong>Author: {author}</strong>\n            <p>{content}</p>\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nReviews.propTypes = {\n  movieReviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default Reviews;\n"],"names":["API_KEY","BASE_URL","getPopularMovies","axios","res","status","Error","data","getSearchMovies","name","getMovieDetails","movieId","getMovieCast","movieID","getMovieReviews","useState","movieReviews","setMovieReviews","movieid","useParams","useEffect","then","total_results","results","map","id","author","content"],"sourceRoot":""}