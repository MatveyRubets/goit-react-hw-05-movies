{"version":3,"file":"static/js/541.eb852f97.chunk.js","mappings":"iTAEMA,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDC,EAAgB,mCAAG,oGACZN,EAAS,sBADG,UAGX,OAFbO,EADwB,QAGtBC,OAHsB,sBAItB,IAAIC,MAAM,8BAJY,gCAOvBF,EAAIG,MAPmB,2CAAH,qDAUhBC,EAAe,mCAAG,WAAMC,GAAN,uFACXZ,EAAS,gCAAD,OAAiCY,IAD9B,UAGV,OAFbL,EADuB,QAGrBC,OAHqB,sBAIrB,IAAIC,MAAM,8BAJW,gCAOtBF,EAAIG,MAPkB,2CAAH,sDAUfG,EAAe,mCAAG,WAAMC,GAAN,uFACXd,EAAS,UAAD,OAAWc,IADR,UAGV,OAFbP,EADuB,QAGrBC,OAHqB,sBAIrB,IAAIC,MAAM,8BAJW,gCAOtBF,EAAIG,MAPkB,2CAAH,sDAUfK,EAAY,mCAAG,WAAMD,GAAN,uFACRd,EAAS,UAAD,OAAWc,EAAX,aADA,UAGP,OAFbP,EADoB,QAGlBC,OAHkB,sBAIlB,IAAIC,MAAM,8BAJQ,gCAOnBF,EAAIG,MAPe,2CAAH,sDAUZM,EAAe,mCAAG,WAAMF,GAAN,uFACXd,EAAS,UAAD,OAAWc,EAAX,aADG,UAGV,OAFbP,EADuB,QAGrBC,OAHqB,sBAIrB,IAAIC,MAAM,8BAJW,gCAOtBF,EAAIG,MAPkB,2CAAH,qD,gFCA5B,UA7Ca,WACX,OAAkCO,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QASR,OAJAE,EAAAA,EAAAA,YAAU,YACRP,EAAAA,EAAAA,IAAaK,GAASG,MAAK,SAAAC,GAAK,OAAIL,EAAaK,EAAMC,KAAvB,GACjC,GAAE,CAACL,IAEGF,GAAkC,IAArBA,EAAUQ,QAC5B,kFAEA,wBACGR,EAAUS,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAelB,EAApC,EAAoCA,KAAMmB,EAA1C,EAA0CA,UAA1C,OACb,2BACE,gBACEC,IACEH,EAAY,yCAC0BA,GAfhD,uKAkBQI,IAAKH,KAEP,wBAAKlB,KACL,uCAAemB,OAVRH,EADI,KAgBpB,C","sources":["api/moviesApi.js","components/Cast/Cast.js"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '34dbf9d1a3fd74b10bf7ab9eec59866f',\n    language: 'en-US',\n  },\n});\n\nexport const getPopularMovies = async () => {\n  const res = await instance('trending/movie/day');\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ü§∑');\n  }\n\n  return res.data;\n};\n\nexport const getSearchMovies = async name => {\n  const res = await instance(`/search/movie?/&page=1&query=${name}`);\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ü§∑');\n  }\n\n  return res.data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const res = await instance(`/movie/${movieId}`);\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ü§∑');\n  }\n\n  return res.data;\n};\n\nexport const getMovieCast = async movieId => {\n  const res = await instance(`/movie/${movieId}/credits`);\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ü§∑');\n  }\n\n  return res.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const res = await instance(`/movie/${movieId}/reviews`);\n\n  if (res.status !== 200) {\n    throw new Error('Nothing Found ü§∑');\n  }\n\n  return res.data;\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'api/moviesApi';\nimport PropTypes from 'prop-types';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const { movieid } = useParams();\n\n  const defaultImage =\n    'https://media.istockphoto.com/vectors/no-image-available-icon-vector-id1216251206?b=1&k=20&m=1216251206&s=170667a&w=0&h=z0hxu_BaI_tuMjMneE_APbnx_-R2KGPXgDjdwLw5W7o=';\n\n  useEffect(() => {\n    getMovieCast(movieid).then(movie => setMovieCast(movie.cast));\n  }, [movieid]);\n\n  return movieCast && movieCast.length === 0 ? (\n    <p>There is no cast information ü§∑üèª</p>\n  ) : (\n    <ul>\n      {movieCast.map(({ id, profile_path, original_name, name, character }) => (\n        <li key={id}>\n          <img\n            src={\n              profile_path\n                ? `https://image.tmdb.org/t/p/w200${profile_path}`\n                : defaultImage\n            }\n            alt={original_name}\n          />\n          <h3>{name}</h3>\n          <p>Character: {character}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nCast.propTypes = {\n  movieCast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      profile_path: PropTypes.string.isRequired,\n      original_name: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default Cast;\n"],"names":["instance","axios","baseURL","params","api_key","language","getPopularMovies","res","status","Error","data","getSearchMovies","name","getMovieDetails","movieId","getMovieCast","getMovieReviews","useState","movieCast","setMovieCast","movieid","useParams","useEffect","then","movie","cast","length","map","id","profile_path","original_name","character","src","alt"],"sourceRoot":""}